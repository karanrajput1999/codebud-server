
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(uuid())
  username String 
  email String
  password String
  comments Comment[] 
  questions Question[] 
  answers Answer[] 
  reputation Int @default(0)
  createdAt DateTime @default(now())
  updated DateTime @updatedAt @default(now())
}

model Question {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String 
  title String
  bodyText String
  comments Comment[] 
  answers Answer[]
  upvote String[] @default([])
  downvote String[] @default([])
  acceptedAnswer String @default("")
  views Int @default(0)
  tags String[] @default([])
  createdAt DateTime @default(now())
  updated DateTime @updatedAt @default(now())
  
}


model Answer{
  id String @id @default(uuid())
  user User  @relation(fields: [userId], references: [id])
  userId String 
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String 
  bodyText String
  comments Comment[] 
  upvote String[] @default([])
  downvote String[] @default([])
  createdAt DateTime @default(now())
  updated DateTime @updatedAt @default(now())
}


model Comment {
  id String @id @default(uuid())
  question Question? @relation(fields: [postId], references: [id], onDelete: Cascade, map: "question")
  answer Answer? @relation(fields: [answerId], references: [id], onDelete: Cascade, map: "answer" )
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, map: "user") 
  postId String
  answerId String
  userId String 
  commentText String
  createdAt DateTime @default(now())
  updated DateTime @updatedAt @default(now())
}